//
// 4.	 Создайте	скрипт,	который	реализует	появление	префаба	в  случайном месте сцены. Радиус появления 20 юнитов.
// Скрипт вешается на пустой объект, в prefab добавляется префаб
public GameObject prefab;

void Update()
{
  if (Input.GetKeyDown(KeyCode.Space))
  {
    Vector3 spawnPosition = new Vector3(Random.Range(Random.Range(-10, 11), Random.Range(-10, 11), Random.Range(-10, 11));
    Instantiate(prefab, spawnPosition, Quaternion.identity);
  }
}

//
// 5.	 Создайте скрипт, который реализует удаление объекта на сцене по нажатию на него левой клавиши мыши.
// Скрипт вешается на объект
private void OnMouseDown()
{
  Destroy(GameObject);
}

//
// 6.	Создайте скрипт, который реализует перемещение объекта по 2- ум осям со скоростью 5.
//
private float speed = 5f;

void Update()
{
  transform.position += new Vector3(speed, 0, speed) * Time.deltaTime;
}

//
// 7.	Создайте скрипт, который реализует уменьшение размера объекта до 0%. При достижении 0% объект нужно удалить.
//
void Update()
{
  transform.localScale -= new Vector3(Time.deltaTime, Time.deltaTime, Time.deltaTime);
  if (transform.localScale <= Vector3(0f, 0f, 0f))
  {
    Destroy(GameObject);
  }
}

//
// 8.	Реализуйте взаимодействие между двумя объектами при  помощи коллизии.
//
private void OnCollisionEnter(Collision collision)
{
  collision.transform.position += new Vector3(0, 5, 0);
}

//
// 9.	Реализуйте передвижение объекта векторным способом
//
void Update()
{
  transform.position += new Vector3(Input.GetAxis("Horizontal"), Input.GetAxis("Vertical"), 0) * Time.deltaTime;
}

//
// 10.	Реализуйте передвижение объекта через компонент Rigidbody
//
public RigidBody rb;
private Vector3 direction = new Vector3(5, 0, 5);
void Update()
{
  rb.AddForce(direction);
}

//
// 11.	Реализуйте с помощью скрипта перемещение камеры за игроком
//
private Vector3 offset;
public Transform target;
private float smoothTime = 0.25f;
private Vector3 currentVelocity = Vector3.zero;

void Awake()
{
  offset = transform.position - target.position;
}

void LateUpdate()
{
  Vector3 targetPosition = target.position + offset;
  transform.position = Vector3.SmoothDamp(transform.position, targetPosition, ref currnetVelocity, smoothTime);
}

//
// ИЛИ
//
public float followSpeed = 2f;
public Transform target;

void Update()
{
  Vector3 newPosition = new Vector3(target.position.x, target.position.y + 10f, target.position - 10f);
  transfrom.position = Vector3.Slerp(transform.position, newPosition, followSpeed * time);
}
